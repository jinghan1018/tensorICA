\documentclass{article}

% \VignetteEngine{utils::Sweave}
% \VignetteIndexEntry{tensorICA}

\usepackage{amsmath}
\usepackage{float}
\usepackage{amscd}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage[margin=1in,footskip=0.25in]{geometry}
\begin{document}
\SweaveOpts{concordance=TRUE}
\title{tensorICA - Tensorial Independent Component Analysis for tensor-valued multi-omic data - R package}
\author{Han Jing, Andrew E. Teschendorff, Joni Virta
    \\
    \href{mailto:jinghan@picb.ac.cn}{jinghan@picb.ac.cn}
    \\
    \href{mailto:andrew@picb.ac.cn}{andrew@picb.ac.cn}
    \\
    \href{mailto:joni.virta@aalto.fi}{joni.virta@aalto.fi}}
\maketitle   

\tableofcontents

\section*{1. Introduction}
This is a demo for using the \verb@tensorICA@ package in R. The \verb@tensorICA@ package is designed for fast decomposition analysis of tensor-valued multi-omic data. It contains several functions for decomposing multi-omic tensor-valued data implementing two tensorial ICA methods and several utility functions for visualizing the relationship between component against phenotype to help with feature selection. Tensorial ICA aims to infer from a data-tensor, statistically independent sources of data variation, which should better correspond to underlying biological factors. Indeed, since biological sources of data variation are generally non-Gaussian and often sparse, the statistical independence assumption implicit in the ICA formalism can help improve the deconvolution of complex mixtures and thus better identify the true sources of data variation. In the package, we here include two tensorial methods call JADE and FOBI, which are the abbreviation of tensorial joint approximate diagonalization of high-order eigenmatrices and tensorial fourth-order blind identication, respectively. These two methods have been elaborated in \verb@tensorBSS@ package.
\section*{2. Get started with tensorICA package}
Tensorial ICA works by decomposing a data tensor into a source tensor and mixing matrices. The key property of tICA is that the independent components in source tensor are as statistically independent from each other as possible. Statistical independence is a stronger criterion than linear decorrelation and allows improved inference of sparse sources of data variation. A prior tensorial PCA is requested as a whitening step to reduce the noise. Positive kurtosis can be used to rank independent components to select the most sparse factors. The largest absolute weights within each independent component can be used for feature selection, while the corresponding component in the mixing matrices informs about the pattern of variation of this component across data types and samples, respectively. 
\subsection*{2.1 Load tensorICA package and example data}
We expect the tensorial ICA methods can capture the variation correlated to the phenotype. However, evaluating methods on real data objectively is challenging due to the difficulty of defining a goldstandard set of true positive associations. Fortunately, a meta-analysis of several smoking EWAS in blood has demonstrated that smoking-associated differentially methylated CpGs are highly reproducible, defining a gold-standard set of 62 smoking-associated CpGs. In addition, it has been showed that all 62 smoking-associated CpGs are associated with smoking exposure effectively if DNA methylation is measured in buccal cell. So, here we use a small tensor-valued DNA methylation dataset meatured on blood and buccal tissues as an example dataset to test methods in terms of their ability to identify these 62 smoking-associated CpGs with their corresponding smoking phenotype information. This tensor dataset consists of two matched HumanMethylation450 BeadChip data matrices meatured on blood and buccal. In each tissue layer matrix, the data is defined over the same CpG sites (columns) and the same individuals (rows). Because there are two distinct samples (blood and buccal) per individual, most of the variation is genetic. Hence, to reduce this background genetic variation, the CpG sites contained in the tensor dataset are obtained by combining 500 non-smoking associated CpGs with the 62 smoking associated CpGs. We expect tensorICA can capture the components which correlated to smoking phenotype with large weight on the 62 smoking associated CpGs. 
\\
The input example data \verb@buccalbloodtensor@ is stored in the package. We can load it with following commands. 
<<install1, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE>>=
library(tensorICA);
data(buccalbloodtensor);
@
It is a list that contains all the data we are going to use the this demo. \verb@buccalbloodtensor@ is a list containing 4 elements. Thereinto, the test tensor-valued DNA methylation dataset is stored in \verb@buccalbloodtensor\$data@. This tensor is builded by 2 layers of dataset matrix of different tissue type. The 11 matched phenotypes of the same 152 samples are stored in \verb@buccalbloodtensor\$pheno.l@. Among all the phenotype, Smoking is the average smoking pack numbers per year of each sample and SmokingStatus is the sample's smoking status, which 0 stands for nonsmokers, 1 stands for ex-smokers and 2 stands for current smokers. A important property corresponding to the input phenotype is whether the phenotypes are categorical, which is stored in a boolean logical vector \verb@buccalbloodtensor\$pheno.i@. Lastly, \verb@buccalbloodtensor\$testDMCs@ is the 562 test CpG names. The first 500 CpGs are the randomly picked non-smoking associated CpGs and the last 62 CpGs are the smoking associated CpGs.
\subsection*{2.2 Estimate subspace dimension carrying significant variation}
Before the decomposition, we need to estimate subspace dimension carrying significant variation in the first step of dimension reduction. Function \verb@EstDim@ is based on Random Matrix Theory(RMT) algorithm to do dimension reduction and output subspace size which can be discribed as the number of significant component in further decompsition. Here in the output list, \verb@dim@ is a vector containing subspace size of each tissue type matrix in dimension reduction, in another words, which is the number of significant components of each tissue type matrix and \verb@dJ@ is the number of significant components of joint variation across all tissue type matrices. These two parameters will be used in the next decomposing step.
<<check1, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE>>=
require(isva);
Dim.l <- EstDim(buccalbloodtensor$data);
dim <- Dim.l$dim;
dJ <- Dim.l$dJ;
@
\subsection*{2.3 Perform tensorial ICA} 
The next step is to then decompose the buccal-blood tensor dataset using tensorial ICA to infer the sources of data variation carrying significant variation. We observe that the function \verb@DoTICA@ uses tensorial PCA (TPCA) as a preliminary step to do the dimensional reduction. The 'method' parameter controls which ICA method we use, with 'JADE' and 'FOBI' the two options available. Here we choose tFOBI method. The output object \verb@tica.o@ contain respective rotation matrices \verb@U@ from TPCA step, unmixing matrices \verb@W@ and source matrices \verb@S@ which are of the same size as input matrices containing the principal components.
<<check2, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE>>=
tica.o <- DoTICA(Data = buccalbloodtensor$data, dim = dim, method = "FOBI");
@
\subsection*{2.4 Correlate inferred components against phenotype}
Now that we have estimated all the significant independent sources, a typical next step is to correlate the inferred components against associated phenotypes. To help assess which components are correlated with which phenotypes, the function cor\_phenotype provides a correlation P-value heatmap between phenotype and the components. The P-values derive from a linear regression model in the case of continuous phenotypes, or from a Kruskal-Wallis/ANOVA test in the case of categorical phenotypes. We can also use the function cor\_phenotype to visualize the mixing matrix component weights against phenotype. In the package, the associated phenotype buccalbloodtensor\$pheno.l is a list of 11 matched phenotypes of the 152 samples. Among them, SmokingPackYear is the average smoking pack numbers per year of each sample and SmokingStatus is the sample's smoking status (0 stands for nonsmokers, 1 stands for ex-smokers and 2 stands for current smokers). We note that the components in the P-value heatmap are not ranked by variance, since the components derived from ICA-like methods do not rely on variance for inference but on higher order statistical moments (notably Kurtosis). Selection of components by variance is only used in the prewhitening step, as implemented using TPCA.
<<check3, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, fig=TRUE, height=4, width=6>>=
phenotype.p <- cor_phenotype(tica.o = tica.o, phenotype = buccalbloodtensor$pheno.l,
                              phenotype.is.categorical = buccalbloodtensor$pheno.i);
phenotype.p$pv.p;
@
\\
From the P-value heatmap, we can now clearly see that component 10 and component 12 are significantly correlated with smoking status and smoking pack years. Correspondingly, by plotting the weights we can observe for instance a strong correlation between component 12 and smoking related phenotypes. 
<<a1, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE, fig=FALSE, height=4, width=6>>=
phenotype.p12 <- cor_phenotype(tica.o = tica.o, phenotype = buccalbloodtensor$pheno.l, 
                                phenotype.is.categorical = buccalbloodtensor$pheno.i,
                                component = 12);
phenotype.p12$compheno.pl$SmokingStatus;
@
<<a10, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, fig=TRUE, height=4, width=6>>=
require(dplyr)
require(tidyr)
require(ggplot2)
phenotype = buccalbloodtensor$pheno.l;
phenotype.is.categorical = buccalbloodtensor$pheno.i;
component = 12;
A_star.m <- t(solve(tica.o$TICA.W[[2]]))%*%t(tica.o$TPCA.U[[2]]);
tmp.df <- data.frame(x = as.factor(buccalbloodtensor$pheno.l$SmokingStatus), y = A_star.m[component,])
tmp.df <- na.omit(tmp.df)
sample_size <- tmp.df %>% group_by(x) %>% summarise(n())
ggplot(tmp.df, aes(x = x, y = y, fill = x)) + geom_boxplot(width = 0.5) +
  scale_fill_brewer(type = "div", palette = 5, aesthetics = "fill", name = "Sample Size",          labels = paste0("n = ", sample_size$`n()`)) +
  theme_bw() + theme(text = element_text(size = 14)) + 
  labs(x = "SmokingStatus", y = "Weight", title=paste0("Component ",component))
@
<<a11, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=TRUE>>=
phenotype.p12$compheno.pl$SmokingPackYear
@
\subsection*{2.5 Weights in feature space}
The independent sources are defined over features, and the weights in these components inform us about which features are important in driving those components. Thus, for instance, we can inspect which features are driving component 12, which as shown above is associated with smoking. We note that for the sources there is a pair of independent components associated with component-12, since there are two tissue-types. Thus, a scatterplot of these pairs of components is appropriate, which we can do in the independent component space or in the rotated basis (labeled by S') where the two dimensions correspond directly to the two tissue-types (as opposed to some linear combination). We can also plot either the weights or absolute weights. The package provides a function to generate all of these plots. In this particular case, the red labeled features correspond to the gold-standard smoking-associated CpGs and these should have larger absolute weights in component 12 compared to non-smoking CpGs. This is confirmed with a Wilcoxon rank sum test between smoking associated CpG (S) and non-smoking CpGs (N). The result shows significant differences in all cases.\\


<<a4, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE,fig=TRUE, height=6, width=6>>=
require(cowplot)
require(ggplot2)
tp <- seq(501,562)
nt.idx <- c(1,2)
component <- 12
x <- tica.o$TICA.S[nt.idx[1],component,]
y <- tica.o$TICA.S[nt.idx[2],component,]
col.idx <- rep(1,dim(tica.o$TICA.S)[3])
col.idx[tp] <- 2
tmp.df <- data.frame(x = x, y = y, color = as.factor(col.idx))
tmp.p <- ggplot(tmp.df,aes(x = x, y = y,  colour = color)) + geom_point(pch = 20, size = 3) + 
  scale_color_manual(values = c("black","red"), name="", labels=c("Nonsmoking CpG","Smoking CpG")) +
  theme_bw() + theme(axis.text=element_text(size=14), axis.title=element_text(size=14), legend.text = element_text(size = 14),legend.position="top")
legend.p <- get_legend(tmp.p)
weight.p <- ggplot(tmp.df,aes(x = x, y = y,  colour = color)) + geom_point(pch = 20, size = 3) + 
  scale_color_manual(values = c("black","red"), name="", guide = FALSE)  +
  theme_bw() + theme(axis.text=element_text(size=14), axis.title=element_text(size=14),legend.text = element_text(size = 14)) + 
  labs(x = paste0("S[",nt.idx[1],",",component,",*]"), y = paste0("S[",nt.idx[2],",",component,",*]"), title="")
abs.p <- ggplot(tmp.df,aes(x = abs(x), y = abs(y),  colour = color)) + geom_point(pch = 20, size = 3) + 
  scale_color_manual(values = c("black","red"), name="", guide = FALSE)  +
  theme_bw() + theme(axis.text=element_text(size=14), axis.title=element_text(size=14), legend.text = element_text(size = 14)) + 
  labs(x = paste0("|S[",nt.idx[1],",",component,",*]|"), y = paste0("|S[",nt.idx[2],",",component,",*]|"), title="")

box_abs1.p <- ggplot(tmp.df, aes(x = color, y = abs(x), fill = color, colour = color)) + geom_boxplot(width = 0.5) + 
  scale_color_manual(values = c("black","red"), guide = FALSE) + scale_fill_manual(values = c("grey","pink"), guide = FALSE) +
  scale_x_discrete(labels = c("N","S")) +
  theme_bw() + theme(axis.text=element_text(size=10), axis.title=element_text(size=10), legend.text = element_text(size = 10),plot.title = element_text(colour = "red",size = 8)) + 
  labs(y = paste0("|S[",nt.idx[1],",",component,",*]|"), x = "", title=paste0("P = ", format(wilcox.test(abs(filter(tmp.df,color == 2)$x), abs(filter(tmp.df,color == 1)$x), alternative = "g")$p.value, digits = 3)))
box_abs2.p <- ggplot(tmp.df, aes(x = color, y = abs(y), fill = color, colour = color)) + geom_boxplot(width = 0.5) + 
  scale_color_manual(values = c("black","red"), guide = FALSE) + scale_fill_manual(values = c("grey","pink"), guide = FALSE) +
  scale_x_discrete(labels = c("N","S")) +
  theme_bw() + theme(axis.text=element_text(size=10), axis.title=element_text(size=10), legend.text = element_text(size = 10),plot.title = element_text(colour = "red",size = 8)) + 
  labs(y = paste0("|S[",nt.idx[2],",",component,",*]|"), x = "", title=paste0("P = ", format(wilcox.test(abs(filter(tmp.df,color == 2)$y), abs(filter(tmp.df,color == 1)$y), alternative = "g")$p.value, digits = 3)))
box_abs_p <- plot_grid(box_abs1.p, box_abs2.p, nrow = 2)
weight_abs.p <- plot_grid(abs.p, box_abs_p, ncol = 2, rel_widths =c(2,1))

x_p <- tica.o$TICA.projS[[nt.idx[1]]][component,]
y_p <- tica.o$TICA.projS[[nt.idx[2]]][component,]
tmp.df <- data.frame(x = x_p, y = y_p, color = as.factor(col.idx))
weight_prime.p <- ggplot(tmp.df,aes(x = x, y = y,  colour = color)) + geom_point(pch = 20, size = 3) + 
  scale_color_manual(values = c("black","red"), name="", guide = FALSE)  +
  theme_bw() + theme(axis.text=element_text(size=14), axis.title=element_text(size=14),legend.text = element_text(size = 14)) + 
  labs(x = paste0("S'[",nt.idx[1],",",component,",*]"), y = paste0("S'[",nt.idx[2],",",component,",*]"), title="")
abs_prime.p <- ggplot(tmp.df,aes(x = abs(x), y = abs(y),  colour = color)) + geom_point(pch = 20, size = 3) + 
  scale_color_manual(values = c("black","red"), name="", guide = FALSE)  +
  theme_bw() + theme(axis.text=element_text(size=14), axis.title=element_text(size=14), legend.text = element_text(size = 14)) + 
  labs(x = paste0("|S'[",nt.idx[1],",",component,",*]|"), y = paste0("|S'[",nt.idx[2],",",component,",*]|"), title="")
box_abs1_prime.p <- ggplot(tmp.df, aes(x = color, y = abs(x), fill = color, colour = color)) + geom_boxplot(width = 0.5) + 
  scale_color_manual(values = c("black","red"), guide = FALSE) + scale_fill_manual(values = c("grey","pink"), guide = FALSE) +
  scale_x_discrete(labels = c("N","S")) +
  theme_bw() + theme(axis.text = element_text(size=10), axis.title = element_text(size=10), legend.text = element_text(size = 10),plot.title = element_text(colour = "red",size = 8)) + 
  labs(y = paste0("|S'[",nt.idx[1],",",component,",*]|"), x = "", title=paste0("P = ", format(wilcox.test(abs(filter(tmp.df,color == 2)$x), abs(filter(tmp.df,color == 1)$x), alternative = "g")$p.value, digits = 3)))
box_abs2_prime.p <- ggplot(tmp.df, aes(x = color, y = abs(y), fill = color, colour = color)) + geom_boxplot(width = 0.5) + 
  scale_color_manual(values = c("black","red"), guide = FALSE) + scale_fill_manual(values = c("grey","pink"), guide = FALSE) +
  scale_x_discrete(labels = c("N","S")) +
  theme_bw() + theme(axis.text = element_text(size=10), axis.title = element_text(size=10), legend.text = element_text(size = 10),plot.title = element_text(colour = "red",size = 8)) + 
  labs(y = paste0("|S'[",nt.idx[2],",",component,",*]|"), x = "", title=paste0("P = ", format(wilcox.test(abs(filter(tmp.df,color == 2)$y), abs(filter(tmp.df,color == 1)$y), alternative = "g")$p.value, digits = 3)))
box_abs_prime.p <- plot_grid(box_abs1_prime.p, box_abs2_prime.p, nrow = 2)
weight_prime_abs.p <- plot_grid(abs_prime.p, box_abs_prime.p, ncol = 2, rel_widths =c(2,1))
main.p <-  plot_grid(plotlist = list(weight.p = weight.p, weight_abs.p = weight_abs.p, weight_prime.p = weight_prime.p, weight_prime_abs.p = weight_prime_abs.p),nrow = 2,rel_widths = c(2,3))
plot_grid(main.p,legend.p,nrow = 2, rel_heights = c(1,0.05))
@

\subsection*{2.6 Feature selection}
More generally, we may not know a-priori which features are important or we may not have a feature importance label. Typically, the task is to select features from the infered components, for which we provide the function feature\_selection. The package provide two ways of selecting the number of top weighted CpGs. First, we can estimate the number of driver features by assessing how much each feature contributes to the kurtosis of the component. This is done in an iterative sequential manner where top-ranked features are subsequently removed until the resulting kurtosis falls below some prespecfied threshold. The threshold is determined by a given upper kurtosis quantile as given by a Gaussian null distribution. This is the parameter 'CLkurt' in the function feature\_selection. Alternatively,  we can simply specify the number of top-ranked features to select with the parameter 'topN'. The function returns the index list 'feature.n\$pred.idx', which is list of the index of selected features in the two tissues. Here we only show the features selected in the first tissue as an example. In this case, the function selects the top 67 CpGs.
<<check6, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=TRUE, height=4, width=6>>=
feature.k <- feature_selection(tica.o = tica.o, component = 12, CLkurt = 0.95);
buccalbloodtensor$testDMCs[feature.k$pred.idx[[1]]];
feature.k$k.p[[1]];
@
<<check8, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=FALSE, height=4, width=6>>=
feature.n <- feature_selection(tica.o = tica.o, component = 12, topN = 62);
buccalbloodtensor$testDMCs[feature.n$pred.idx[[1]]];
@
\subsection*{2.7 Feature profile}
Finally, since we have selected features, the coresponding molecular profiles should be checked against phenotypes of interest. In this scenario, the DNA methylation profiles of selected features can be plotted against smoking status and smoking pack years by function feature\_profile. By default, top 10 features are shown in the plot. 
<<d1, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=TRUE, height=4, width=6>>=
(profile.p <- feature_profile(Data = buccalbloodtensor$data, 
phenotype.v = buccalbloodtensor$pheno.l$SmokingStatus, phenotype.is.categorical = TRUE,
feature.index = feature.k$pred.idx[[1]][seq_len(10)], tissue.index = 1));
@
<<d2, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=TRUE, height=4, width=6>>=
(profile.p <- feature_profile(Data = buccalbloodtensor$data, 
phenotype.v = buccalbloodtensor$pheno.l$SmokingPackYear, phenotype.is.categorical = FALSE,
feature.index = feature.k$pred.idx[[1]][seq_len(10)], tissue.index = 1));
@
\subsection*{2.8 Check sensitivity}
To check the accuracy of the methods, we can use function EstSE to estimate the sensitivity if the true positive set is known.  
<<check7, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE,fig=TRUE, height=4, width=6>>=
require(cowplot)
SE <- EstSE(tica.o = tica.o, tp = seq(501,562));
plot_grid(SE$se.p, SE$pv.p, nrow = 2);
@
\section*{3. Citation}
Teschendorff AE, Han J, Paul D, Virta J, Nordhausen K.
\emph{Tensorial Blind Source Separation for Improved Analysis of Multi-Omic Data.}
Genome Biology (2018) 19:76.
\section*{4. Session information:}
Output of sessionInfo on the system on which this document was compiled:
<<sessionInfo, results=tex, echo=FALSE>>=
toLatex(sessionInfo())
@
\end{document}
